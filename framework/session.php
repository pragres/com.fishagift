<?php/* * ADD THIS TABLE TO YOUR DATABASE TO USE THE SESSION HANDLER * more info: http://shiflett.org/articles/storing-sessions-in-a-database *  CREATE TABLE sessions (  id varchar(32) NOT NULL,  access int(10) unsigned,  data text,  PRIMARY KEY (id)  ); */class session {    /**     * start the basic session only the first time the page loads     * no need to call this function. Called after session_start()     * Follows the pattern Singletton     */    static private function start_default_session() {        // set language by default to English        if (!framework::session_exists('language')) {            framework::session_set('language', 'en');        }        // start the an empty TraceStack structure in the session         if(!Tracer::isTraceStackCreated()){
        	Tracer::createTraceStack();
        }        // creating an empty shopping cart in the session        if (!framework::session_exists('shopping_cart')) {            include_once framework::resolve('packages/store/model/ShoppingCart.php');            ShoppingCart::clearShoppingCart();        }    }    /**     * includes access to the session variable     * call this function to store the session in     * the database instead of in memory     * no need to call this function if using framework::session_set() and framework::session_get()     */    static public function session_start() {        self::start_session_handler();        if (session_id() == '') {            $domain = framework::$config['website']['appdomain'];            $session_expires = framework::$config['website']['session_expiration_time'];            session_set_cookie_params($session_expires, "/", ".$domain");            session_start();        }        self::start_default_session();    }    /**     * Override the default session mechanism to make the     * session be write/loaded from the database instead     * of the file system     */    static public function start_session_handler() {        session_set_save_handler(                'session::open',                'session::close',                'session::read',                'session::write',                'session::destroy',                'session::clean'        );    }    /**     * Open a new connection to the database to store the session     * @return: true or false if the connection was successful     */    static public function open() {        if (!framework::$conn) {            framework::connect();        }        if (framework::$conn)            return true;        else            return false;    }    /**     * Closes the current connection with the database     * @return: true or false if the connection was closed     */    static public function close() {        return framework::disconnect();    }    /**     * Read a session id from the database     * @param: $id, number of the session in the cookie     * @return: Array with the row read or a blank string     */    static public function read($id) {        $id = mysql_real_escape_string($id);        $sql = "SELECT data FROM sessions WHERE id = '$id'";        $data = framework::query($sql);        if (isset($data[0]))            return $data[0]['data'];        return null;    }    /**     * Save/update a session row in the database     * @param: $id, number of the session in the cookie     * @param: $data, information about the session to store     * @return: true or false if the connection was wrote     */    static public function write($id, $data) {        $id = mysql_real_escape_string($id);        $access = mysql_real_escape_string(time());        $data = mysql_real_escape_string($data);        $sql = "REPLACE INTO sessions VALUES ('$id', '$access', '$data')";        return framework::query($sql);    }    /**     * Destroy all session data associated with a specific session identifier     * @param: $id, number of the session in the cookie     * @return: true or false if the connection was wrote     */    function destroy($id) {        $id = mysql_real_escape_string($id);        $sql = "DELETE FROM sessions WHERE  id = '$id'";        return framework::query($sql);    }    /**     * Called every once in a while to delete old records in the session data     * @param: $id, number of the session in the cookie     * @return: true or false if the connection was wrote     */    function clean($max) {        $old = time() - $max;        $old = mysql_real_escape_string($old);        $sql = "DELETE FROM sessions WHERE access < '$old'";        return framework::query($sql);    }}